<?php 

/**
 * {@inheritdoc}
 */
function omdexam_menu() {
    $items = array();
  
    $items['admin/config/omdexa'] = array(
      'title' => 'ASS My Module',
      'description' => 'Whatever',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('my_module_admin_form'),
      'access arguments' => array('administer my module'),
      'type' => MENU_NORMAL_ITEM,
    );
    return $items;
  }

  /**
   * {@inheritDoc}
   */
  function omdexam_cron(){
    try{
        $headers = [];
        $body = 'NotNull';
        $url = 'http://localhost:3000/movies';
        $client = \Drupal::httpClient();
        $res = $client->request('GET', $url, $headers, $body);
        $jsonMovie = json_decode($res->getBody(), true);
        
        $newlyImportedMovies = []; 
        // Iterate through jason stream
        foreach($jsonMovie as $movie){
            // Request moviepost object with the current movie_uid of the json stream object we are iterating on
            $nodes = \Drupal::entityTypeManager()
            ->getStorage('node')
            ->loadByProperties([
                'type' => 'moviepost',
                'field_movie_uid' => $movie['id'],
            ]);
            // If the node doesnt already exist in the database, import it
            if ( !($node = reset($nodes))) {
                $data = [
                    'type' => 'moviepost', 
                    'title' => $movie["title"], 
                    'field_movie_release_date' => $movie["release"],
                    'field_movie_director' => $movie["director"],
                    'body' => $movie["synopsis"],
                    'uid' => (int)$movie["id"],
                    'field_movie_uid' => $movie['id']
                ];
                $node = \Drupal::entityTypeManager()
                ->getStorage('node')
                ->create($data);
                $node->save();
                
                // Add title and timestamp to newlyImportedMovies for display on admin page
                $current_time = \Drupal::time()->getRequestTime();
                $dateOutput = date('F d, Y', $current_time); 
                $formattedDate = $dateOutput . " @ " . date("h:i:a");
                array_push($newlyImportedMovies, ['id' => $movie['id'], 'title' => $movie['title'], 'timestamp' => $formattedDate]);
                
            }else{ // A moviepost node already exists with this json stream objects movie_uid, lets not import it to avoid duplicates
                \Drupal::messenger()->addMessage('Database entry already exists with ID: ' . $movie['id'] . " | ". $movie['title']); // . ' | Dump: ' . var_export($nodes, true)
            }
        }
        // Add newly imported moviepost objects to 'omdexam_last_import' table for display on admin page (if there are any)
        if(count($newlyImportedMovies) != 0){
            //Delete all previously stored moviepost nodes from old import and update with new ones 
            // Get Drupal Database Connection as you can, or get using this.
            $connection = \Drupal::database();
            $num_deleted = $connection->delete('omdexam_last_import')
            ->execute();

            $connection = \Drupal::service('database');
            foreach($newlyImportedMovies as $movie){
                $result = $connection->insert('omdexam_last_import')
                ->fields([
                'movie_uid' => $movie['id'],
                'title' => $movie['title'],
                'import_time' => $movie['timestamp'],
                ])->execute();
            }
        }
        
        $current_time = \Drupal::time()->getRequestTime();
        $dateOutput = date('F d, Y', $current_time); 
        \Drupal::messenger()->addMessage('Thank you\n Time: ' . $dateOutput . " @ " . date("h:i:a"));
        //\Drupal::logger('omdexam')->notice(strval($res->getStatusCode()) . " | " . strval($res->getBody()) . " | " . var_export($jsonMovie, true));
    }catch(\Exception $e){
        \Drupal::messenger()->addMessage(t("Error fetching"));
        \Drupal::logger('omdexam')->notice("Fetch Error: " . $e->getMessage());
    }
}